#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

//#define interrupt
#define polling

// Set period and pulse width of the EGM
static void configure_EGM(alt_u16 period)
{
    IOWR(EGM_BASE,2,period);
    IOWR(EGM_BASE,3,period >> 1);
}

#ifdef interrupt
// ISR
static void stimulus_in_ISR(void* context, alt_u32 id)
{
	IOWR(LED_PIO_BASE,0,2);
    IOWR(RESPONSE_OUT_BASE,0,1);
    IOWR(RESPONSE_OUT_BASE,0,0);
    IOWR(STIMULUS_IN_BASE,3,0);
    IOWR(LED_PIO_BASE,0,0);
}

// Register the ISR
static void configure_interrupt()
{
    alt_irq_register(STIMULUS_IN_IRQ, (void*) 0, stimulus_in_ISR);
    IOWR(STIMULUS_IN_BASE,2,1);
}
#endif

// Background task, copied from Learn
int background()
{
    int j;
    int x = 0;
    int grainsize = 4;
    int g_taskProcessed = 0;
    IOWR(LED_PIO_BASE,0,1); // turn LEDs BIT0 to ON to denote START of background task
    for(j = 0; j < grainsize; j++)
    {
        g_taskProcessed++;
    }
    IOWR(LED_PIO_BASE,0,0); // turn LEDs BIT0 to OFF to denote END of background task
    return x;
}

int main()
{
    #ifdef interrupt
    configure_interrupt();
    #endif

    alt_u16 i;
    alt_u32 BG_task;

    // polling requires additional variables declared
    #ifdef polling
    alt_u32 j;
    alt_u32 num_task;
    alt_u8 previous_status;
    alt_u8 current_status;
    #endif

    // Run the following lines once to set up
    background();
    // Disable EGM
    IOWR(EGM_BASE,0,0);
    // Check if EGM is busy
    IORD(EGM_BASE,1);
    // Configure EGM
    configure_EGM(1000);

    #ifdef interrupt
    printf("Operating MODE: Interrupt\n");
    #endif
    #ifdef polling
    printf("Operating MODE: Tight-Polling\n");
    #endif
    printf("Period, Pulse_Width, BGtasks, Avg Latency, Missed Pulses\n");

    // Wait for PB0 push to begin
    while(!(0x01 & ~(IORD(BUTTON_PIO_BASE,0)))){}

    for(i=2;i<5001;i+=2)
    {
        BG_task = 0;

        #ifdef interrupt
        configure_EGM(i);
        IOWR(LED_PIO_BASE,0,4);
        IOWR(LED_PIO_BASE,0,0);
        IOWR(EGM_BASE,0,1);
        // While EGM is busy, keep running; break when EGM is done
        while(IORD(EGM_BASE,1))
        {
            background();
            BG_task++;
        }
        #endif

        #ifdef polling
        IOWR(LED_PIO_BASE,0,4);
        // Assign a current status since it's unknown
        current_status = 1;
        configure_EGM(i);

        IOWR(LED_PIO_BASE,0,0);
        IOWR(EGM_BASE,0,1);
        // Wait for stimulus to be high to begin
        while(!IORD(STIMULUS_IN_BASE,0)){}
        // Immediately send out a response
        IOWR(RESPONSE_OUT_BASE,0,1);
        IOWR(RESPONSE_OUT_BASE,0,0);
        // Begin characterization
        // Run background task at least once
        do
        {
            background();
            BG_task++;
            // Check if EGM is done
            if(!IORD(EGM_BASE,1)) break;

            previous_status = current_status;
            current_status = IORD(STIMULUS_IN_BASE,0);
        } while(!(current_status && !previous_status));
        // Immediately send out a response
        IOWR(RESPONSE_OUT_BASE, 0, 1);
        IOWR(RESPONSE_OUT_BASE, 0, 0);
        // Run background tasks in the second cycle
        num_task = BG_task-1;
        for(j=0;j<num_task;j++)
        {
            background();
        }
        // Incrementing BG_task isn't necessary because later it cancels out
        //BG_task += num_task;
        do
        {
            while(!IORD(STIMULUS_IN_BASE,0) && IORD(EGM_BASE,1)){}
            IOWR(RESPONSE_OUT_BASE, 0, 1);
            IOWR(RESPONSE_OUT_BASE, 0, 0);
            for(j=0;j<num_task;j++)
            {
                background();
            }
            BG_task += num_task;
        } while(IORD(EGM_BASE,1));

        #endif

        IOWR(EGM_BASE,0,0);
        printf("%d,%d,%d,%d,%d\n",i,i>>1,BG_task,IORD(EGM_BASE,4),IORD(EGM_BASE,5));
    }
}
