/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

//#define interrupt

#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

static void configure_EGM(alt_u16 period)
{
	IOWR(EGM_BASE,2,period);
	IOWR(EGM_BASE,3,period >> 1);
}

static void stimulus_in_ISR(void* context, alt_u32 id)
{
	IOWR(RESPONSE_OUT_BASE, 0, 1);
	IOWR(RESPONSE_OUT_BASE, 0, 0);
	IOWR(STIMULUS_IN_BASE, 3, 0);
}

static void configure_interrupt()
{
	alt_irq_register(STIMULUS_IN_IRQ, (void*) 0, stimulus_in_ISR);
	IOWR(STIMULUS_IN_BASE, 2, 1);
}

int background()
{
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;
	IOWR(LED_PIO_BASE,0,1); // turn LEDs BIT0 to ON to denote START of background t
	for(j = 0; j < grainsize; j++)
	{
		g_taskProcessed++;
	}
	IOWR(LED_PIO_BASE,0,0); // turn LEDs BIT0 to OFF to denote END of background tas
	return x;
}

int main()
{

#ifdef interrupt
  configure_interrupt();
  alt_u16 i;
  alt_u32 BG_task = 0;
  for(i=2;i<5001;i+=2)
  {
	  BG_task = 0;
	  configure_EGM(i);
	  IOWR(EGM_BASE,0,1);
	  while(IORD(EGM_BASE,1))
	  {
		  background();
		  BG_task++;
	  }
	  IOWR(EGM_BASE,0,0);

	  printf("%d,%d,%d,%d,%d\n",i,i>>1,BG_task,IORD(EGM_BASE,4),IORD(EGM_BASE,5));

  }
#else
  alt_u16 i;
  alt_u32 j;
  alt_u32 BG_task;
  alt_u16 num_task;
  IOWR(EGM_BASE,0,0);
  for(i=2;i<5001;i+=2)
  {
	  BG_task = 0;

	  configure_EGM(i);
	  IOWR(EGM_BASE,0,1);
	  while(IORD(STIMULUS_IN_BASE,0) == 0){}
	  IOWR(RESPONSE_OUT_BASE, 0, 1);
	  IOWR(RESPONSE_OUT_BASE, 0, 0);
	  do
	  {
		  background();
		  BG_task++;
	  } while(IORD(STIMULUS_IN_BASE,0));
	  do
	  {
		  background();
		  BG_task++;
	  } while(IORD(STIMULUS_IN_BASE,0) == 0);
	  IOWR(RESPONSE_OUT_BASE, 0, 1);
	  IOWR(RESPONSE_OUT_BASE, 0, 0);
	  num_task = BG_task-1;
	  for(j=0;j<num_task;j++)
	  {
		  background();
		  BG_task++;
	  }
	  while(IORD(STIMULUS_IN_BASE,0) == 0 && IORD(EGM_BASE,1))
	  {
		  IOWR(RESPONSE_OUT_BASE, 0, 1);
		  IOWR(RESPONSE_OUT_BASE, 0, 0);
		  for(j=0;j<num_task;j++)
		  {
			  background();
			  BG_task++;
		  }
	  }
	  IOWR(EGM_BASE,0,0);




//	  while(IORD(EGM_BASE,1))
//	  {
//		  background();
//		  BG_task++;
//	  }
//	  IOWR(EGM_BASE,0,0);

	  printf("%d,%d,%d,%d,%d\n",i,i>>1,BG_task,IORD(EGM_BASE,4),IORD(EGM_BASE,5));

  }

#endif

  return 0;
}
